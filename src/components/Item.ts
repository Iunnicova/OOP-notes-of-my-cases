import { IItem } from "../types";
//* МОДУЛЬ ПО СОЗДАНИЮ КАРТОЧЕК И СОЗДАНИЕ ФУНКЦИИ В КОТОРЫХ МЫ БУДЕМ ОПИСЫВАТЬ ДЕЙСТВИЕ КОТОРЫЕ БУДУТ ВЫПОЛНЯТСЯ С ЭТОЙ КАРТОЧКОЙ

//класс Item в котором описываем 2 свойства itemElement и title 21 и 22 строка
//*Объект Item предназначен для того чтобы создавать разметку карточки и с помощью методов нам будет удобно с ней в последсевии работать

// export interface IViewItem {
// 	id: string;
// 	name: string;
// 	render(item: IItem): HTMLElement;
// 	// setDeleteHandler(handleDeleteItem: Function): void;
// 	// setCopyHandler(handleCopyItem: Function): void;
// }

// //интерфейс для конструктора 
// export interface IViewItemConstructor {
// 	new (template: HTMLTemplateElement): IViewItem
// }


export class Item {
  //itemElement элемент разметки который будет создаватся за счет этого класс для вывода карточки на экран будем 	сохранять в отдельном свойстве
  protected itemElement: HTMLElement;

  // title элемент в котором будет хранить название карточки сохпраним как свойство класса и сможем в последсевии быстро к нему обращатсяться
  protected title: HTMLElement;

  //определяем новое свойство которое будет отвечать за хранение id задач. даем название с черточкой-будем использовать set и get
  protected _id: string;

  //конструктор это та функция которая вызывается при создание экземпляра  класса карточки т.е  как только написали new и указали свой класс у нас запускается функция конструктора те параметры которые прописыуваются в функции конструктор нужно будет заполнять и передовать аргументы в них при создании экземпляра. Мы пишем new название класса и дальше в скобочках перечисляются аргументы которые попадут в функцию конструктор.Функция сонструктор предназначена для какого то начального заполнения и создания вот того самого объекта с которым в последствие буду работать
  constructor(template: HTMLTemplateElement) {
    // Мы кланируем наш элемент из темплейта.. as HTMLElement  - в конце принудительно говорим, что нам нужна не нода а HTMLElement документ. из HTML<li class="todo-item">
    this.itemElement = template.content
      .querySelector(".todo-item")
      .cloneNode(true) as HTMLElement;

    //находим элемент в котором хранится название карточки работаем с itemElement в нем находим элемент, нужный нам текст, само название той карточки которое мы добавляем. из HTML<span class="todo-item__text"></span>
    this.title = this.itemElement.querySelector(".todo-item__text");

    //сохранив это в полях класса мы можем использовать мы можем использовать эти свойства в любом методе который будет в нашем классе
  }

  //добавляем set get для работы с id и названием
  //когда будем сохранять новый id будем его записывать в id
  set id(value: string) {
    this._id = value;
  }

  get id(): string {
    return this._id || "";
  }

  // если передаем новое название ,то мы его записываем в textContent элемента title
  set name(value: string) {
    this.title.textContent = value;
  }

  get name(): string {
    return this.title.textContent || "";
  }

  // метод render тот самый метод который будет нам возвращать разметку карточки. Выносим этот функционал в отдельнвый метод мы знаем что текст карточки будет меняться в будущем карточки будут копироватся удалаться или редоктироватся. если мы хотим получить карточку с какимто другим названием не item то мы можем вызвать метод рендер с переданным новым названием. и нам вернется карточка текст которой будет изменен.
  //IItem - добавляем с интерфейса папка type
  //хранение имени в рендере будет при помощи сеттера, что бы код не дублировался
  render(item: IItem) {
    this.name = item.name;
    this.id = item.id;
    return this.itemElement;
  }

  //в конструкторе мы нашли элементы разметки строка 30 и 33 которыми мы будем пользоватся в методах и создали метод 39 строка который возвращает, генерирует нам окончательную разметку карточки метод рендер принимает название заполняет textContent у title и возвращает нам itemElement
}
